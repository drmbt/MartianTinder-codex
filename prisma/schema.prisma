// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  
  // Relations
  memberships ChannelMember[]
  supports    SupportSignal[]
  states      ProposalUserState[]
  proposals   Proposal[]
  accounts    Account[]
  sessions    Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  
  // Relations
  members     ChannelMember[]
  proposals   Proposal[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  role      String   // "owner" | "moderator" | "member"
  createdAt DateTime @default(now())
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channelId])
}

model Proposal {
  id             String   @id @default(cuid())
  channelId      String
  ownerId        String
  title          String
  note           String
  imageUrl       String?
  minCapacity    Int?
  maxCapacity    Int?
  threshold      Int?     // if null, threshold == minCapacity || simple quorum rule
  publishAt      DateTime? // null = publish now
  expiresAt      DateTime?
  visibility     String   // "channel" | "public"
  allowAnonymous Boolean  @default(false)
  moderationMode String   // "auto" | "manual"
  externalChatUrl String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  channel  Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  owner    User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  supports SupportSignal[]
  states   ProposalUserState[]
  event    Event?
}

model SupportSignal {
  id         String   @id @default(cuid())
  userId     String
  proposalId String
  type       String   // "support" | "supersupport" | "oppose"
  visibility String   // "public" | "private" | "anonymous"
  createdAt  DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  
  @@unique([userId, proposalId])
}

model ProposalUserState {
  id         String   @id @default(cuid())
  userId     String
  proposalId String
  state      String   // "none" | "skipped" | "dismissed" | "starred"
  updatedAt  DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  
  @@unique([userId, proposalId])
}

model Event {
  id          String   @id @default(cuid())
  proposalId  String   @unique
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime?
  location    String?
  icsUid      String   @unique
  createdAt   DateTime @default(now())
  
  // Relations
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}
